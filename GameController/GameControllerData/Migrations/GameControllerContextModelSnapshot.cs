// <auto-generated />
using System;
using GameControllerData;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace GameControllerData.Migrations
{
    [DbContext(typeof(GameControllerContext))]
    partial class GameControllerContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.11-servicing-32099");

            modelBuilder.Entity("GameControllerData.Models.Adventure", b =>
                {
                    b.Property<int>("AdventureID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CoverImage");

                    b.Property<string>("Description");

                    b.Property<string>("Title");

                    b.Property<int?>("WaypointID");

                    b.HasKey("AdventureID");

                    b.HasIndex("WaypointID");

                    b.ToTable("Adventure");
                });

            modelBuilder.Entity("GameControllerData.Models.AdventureMap", b =>
                {
                    b.Property<int>("FromWaypointID");

                    b.Property<int>("ToWaypointID");

                    b.HasKey("FromWaypointID", "ToWaypointID");

                    b.HasIndex("ToWaypointID");

                    b.ToTable("AdventureMap");
                });

            modelBuilder.Entity("GameControllerData.Models.AdventureSession", b =>
                {
                    b.Property<int>("TeamID");

                    b.Property<int>("AdventureID");

                    b.Property<int>("WaypointID");

                    b.HasKey("TeamID");

                    b.HasIndex("AdventureID");

                    b.HasIndex("WaypointID");

                    b.ToTable("AdventureSession");
                });

            modelBuilder.Entity("GameControllerData.Models.Challenge", b =>
                {
                    b.Property<int>("ChallengeID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ChallengeDetail");

                    b.Property<string>("ChallengeType");

                    b.Property<string>("CorrectAnswer");

                    b.HasKey("ChallengeID");

                    b.ToTable("Challenge");
                });

            modelBuilder.Entity("GameControllerData.Models.Message", b =>
                {
                    b.Property<int>("MessageID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("MessageContent");

                    b.Property<int>("TeamID");

                    b.Property<DateTime>("Time");

                    b.HasKey("MessageID");

                    b.HasIndex("TeamID");

                    b.ToTable("Message");
                });

            modelBuilder.Entity("GameControllerData.Models.newAdventureMap", b =>
                {
                    b.Property<int>("AdventureMapID")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("FromWaypointID");

                    b.Property<int>("ToWaypointID");

                    b.HasKey("AdventureMapID");

                    b.HasIndex("FromWaypointID");

                    b.HasIndex("ToWaypointID");

                    b.ToTable("newAdventureMaps");
                });

            modelBuilder.Entity("GameControllerData.Models.Student", b =>
                {
                    b.Property<int>("StudentID")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("TeamID");

                    b.HasKey("StudentID");

                    b.HasIndex("TeamID");

                    b.ToTable("Student");
                });

            modelBuilder.Entity("GameControllerData.Models.Submission", b =>
                {
                    b.Property<int>("SubmissionID")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ChallengeID");

                    b.Property<string>("Image");

                    b.Property<int>("TeamID");

                    b.Property<string>("Text");

                    b.HasKey("SubmissionID");

                    b.HasIndex("ChallengeID");

                    b.HasIndex("TeamID");

                    b.ToTable("Submission");
                });

            modelBuilder.Entity("GameControllerData.Models.Team", b =>
                {
                    b.Property<int>("TeamId")
                        .ValueGeneratedOnAdd();

                    b.Property<double>("Latitude");

                    b.Property<double>("Longtitude");

                    b.Property<string>("Name");

                    b.HasKey("TeamId");

                    b.ToTable("Team");
                });

            modelBuilder.Entity("GameControllerData.Models.Waypoint", b =>
                {
                    b.Property<int>("WaypointID")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("AdventureID");

                    b.Property<int?>("ChallengeID");

                    b.Property<string>("Content");

                    b.Property<double>("Latitude");

                    b.Property<double>("Longitude");

                    b.HasKey("WaypointID");

                    b.HasIndex("AdventureID");

                    b.HasIndex("ChallengeID");

                    b.ToTable("Waypoint");
                });

            modelBuilder.Entity("GameControllerData.Models.Adventure", b =>
                {
                    b.HasOne("GameControllerData.Models.Waypoint", "Waypoint")
                        .WithMany()
                        .HasForeignKey("WaypointID");
                });

            modelBuilder.Entity("GameControllerData.Models.AdventureMap", b =>
                {
                    b.HasOne("GameControllerData.Models.Waypoint", "FromWaypoint")
                        .WithMany()
                        .HasForeignKey("FromWaypointID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("GameControllerData.Models.Waypoint", "ToWaypoint")
                        .WithMany()
                        .HasForeignKey("ToWaypointID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GameControllerData.Models.AdventureSession", b =>
                {
                    b.HasOne("GameControllerData.Models.Adventure", "Adventure")
                        .WithMany()
                        .HasForeignKey("AdventureID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("GameControllerData.Models.Team", "Team")
                        .WithMany()
                        .HasForeignKey("TeamID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("GameControllerData.Models.Waypoint", "Waypoint")
                        .WithMany()
                        .HasForeignKey("WaypointID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GameControllerData.Models.Message", b =>
                {
                    b.HasOne("GameControllerData.Models.Team", "Team")
                        .WithMany()
                        .HasForeignKey("TeamID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GameControllerData.Models.newAdventureMap", b =>
                {
                    b.HasOne("GameControllerData.Models.Waypoint", "FromWaypoint")
                        .WithMany()
                        .HasForeignKey("FromWaypointID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("GameControllerData.Models.Waypoint", "ToWaypoint")
                        .WithMany()
                        .HasForeignKey("ToWaypointID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GameControllerData.Models.Student", b =>
                {
                    b.HasOne("GameControllerData.Models.Team", "Team")
                        .WithMany()
                        .HasForeignKey("TeamID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GameControllerData.Models.Submission", b =>
                {
                    b.HasOne("GameControllerData.Models.Challenge", "Challenge")
                        .WithMany()
                        .HasForeignKey("ChallengeID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("GameControllerData.Models.Team", "Team")
                        .WithMany()
                        .HasForeignKey("TeamID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GameControllerData.Models.Waypoint", b =>
                {
                    b.HasOne("GameControllerData.Models.Adventure", "Adventure")
                        .WithMany()
                        .HasForeignKey("AdventureID");

                    b.HasOne("GameControllerData.Models.Challenge", "Challenge")
                        .WithMany()
                        .HasForeignKey("ChallengeID");
                });
#pragma warning restore 612, 618
        }
    }
}
